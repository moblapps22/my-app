{"version":3,"sources":["logo.svg","Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","state","menu","toggleMenu","bind","this","setState","show","className","id","href","onClick","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAAAA,EAAOC,QAAU,IAA0B,kC,wKCwC5BC,G,gEAhCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,GAER,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALD,E,0EASjBC,KAAKC,SAAS,CAAEJ,MAAOG,KAAKJ,MAAMC,S,+BAIhC,IAAMK,EAAQF,KAAKJ,MAAMC,KAAQ,OAAS,GAC1C,OACA,yBAAKM,UAAU,iBAAiBC,GAAG,QAC/B,yBAAKD,UAAU,aACX,wBAAIA,UAAW,YAAcD,GACzB,4BAAI,uBAAGG,KAAK,YAAR,aACJ,4BAAI,uBAAGA,KAAK,WAAR,YACJ,4BAAI,uBAAGA,KAAK,aAAR,aACJ,4BAAI,uBAAGA,KAAK,SAAR,UACJ,4BAAI,uBAAGA,KAAK,8BAAR,SACJ,4BAAI,uBAAGA,KAAK,YAAR,aAER,uBAAGF,UAAU,gBAAgBE,KAAK,IAAIC,QAAUN,KAAKF,YAAc,uBAAGK,UAAU,mB,GA3B5EI,cCuCHC,E,YAhCb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,GAER,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBALD,E,0EASjBC,KAAKC,SAAS,CAAEJ,MAAOG,KAAKJ,MAAMC,S,4HAYpBG,KAAKJ,MAAMC,KAEzB,OACI,kBAAC,EAAD,U,GA1BUY,IAAMF,WCCJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1bfc48c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport './css/responsive.css'\r\nimport './css/style.css'\r\nimport './css/bootstrap.css'\r\nimport './css/font-awesome.min.css'\r\n\r\nclass Nav extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      menu: false\r\n    };\r\n    this.toggleMenu = this.toggleMenu.bind(this);\r\n  }\r\n\r\n  toggleMenu(){\r\n    this.setState({ menu: !this.state.menu })\r\n  }\r\n\r\n  render() {\r\n      const show = (this.state.menu) ? \"show\" : \"\" ;\r\n      return (\r\n      <nav className=\"main-nav-outer\" id=\"test\">\r\n          <div className=\"container\">\r\n              <ul className={\"main-nav \" + show}>\r\n                  <li><a href=\"#service\">Services</a></li>\r\n                  <li><a href=\"#client\">Clients</a></li>\r\n                  <li><a href=\"#projects\">Projects</a></li>\r\n                  <li><a href=\"#team\">About</a></li>\r\n                  <li><a href=\"https://blog.davestern.com\">Blog</a></li>\r\n                  <li><a href=\"#contact\">Contact</a></li>\r\n              </ul>\r\n              <a className=\"res-nav_click\" href=\"#\" onClick={ this.toggleMenu } ><i className=\"fa-bars\"></i></a>\r\n          </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './css/style.css'\nimport './css/bootstrap.css'\nimport './css/responsive.css'\nimport $ from 'jquery';\nimport  'jquery.easing';\nimport Helmet from 'react-helmet'\nimport Nav from './Nav'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      menu: false\n    };\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  toggleMenu(){\n    this.setState({ menu: !this.state.menu })\n  }\n\n\n  componentDidMount() {\n  }\n\n  componentWillUnmount(){\n\n  }\n\n  render() {\n    const show = (this.state.menu) ? \"show\" : \"\" ;\n\n    return (\n        <Nav/>\n      );\n    }\n\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}